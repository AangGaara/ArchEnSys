projection_data$value  <- sub("(","-", projection_data$value, fixed = TRUE)
projection_data$value  <- sub(")","", projection_data$value, fixed = TRUE)
projection_data$value  <- as.numeric(projection_data$value)
# pivot to wider variable
# https://seananderson.ca/2013/10/19/reshape/
projection_data_source <- reshape2:: dcast(projection_data,
Province + year ~ new_var,
value.var = "value",
fun.aggregate =  mean,
na.rm = TRUE)
# return the values to original units
# remove unneeded data
projection_data_source[,c('inflation',
'add_capacity_cum',
'add_capacity',
'electrification_ratio',
'total_capacity')] <- NULL
# GDPR --------------------------------------------------------------------
# calculated from gdpr growth and gdpr in historical data
# GDPR
# Population growth -------------------------------------------------------
#taken from population growth data
# Population --------------------------------------------------------------
# calculated from population growth and population historical data
# Energy Intensity --------------------------------------------------------
# Electricity consumption per capita --------------------------------------
View(projection_data_source)
# GDPR from 2019
# read data from historical_data_source
source("demand_forecast_historical_data_source.R")
View(historical_data_source)
#read 2019 GDPR data
nn_dataset <- historical_data_source[historical_data_source$year =="2019",]
#read 2019 GDPR data
gdpr_billion_idr_2019 <- historical_data_source[historical_data_source$year =="2019",]
View(gdpr_billion_idr_2019)
#read 2019 GDPR data
gdpr_billion_idr_2019 <- historical_data_source[historical_data_source$year =="2019", c,('Province',
'year',
'gdpr_billion_idr')]
#read 2019 GDPR data
gdpr_billion_idr_2019 <- historical_data_source[historical_data_source$year =="2019", c('Province',
'year',
'gdpr_billion_idr')]
#input 2019 gdpr data to projection data
projection_data_source$gdpr_billion_idr_2019 <- 0
aprojection_data_source <- merge(projection_data_source, gdpr_billion_idr_2019, by = c("Province", "year"), sort = FALSE)
View(aprojection_data_source)
unique(projection_data$Province)
aa <- unique(projection_data$Province)
aa <- unique(gdpr_billion_idr_2019$Province)
aprojection_data_source <- merge(projection_data_source, gdpr_billion_idr_2019, by = c("Province", "year"), all.x = TRUE, sort = FALSE)
projection_data_source <- reshape2:: dcast(projection_data,
Province + year ~ new_var,
value.var = "value",
fun.aggregate =  mean,
na.rm = TRUE)
# return the values to original units
# remove unneeded data
projection_data_source[,c('inflation',
'add_capacity_cum',
'add_capacity',
'electrification_ratio',
'total_capacity')] <- NULL
#input 2019 gdpr data to projection data
aa <- unique(projection_data_source$year)
count(projection_data_source$year, "2019")
count(projection_data_source, "2019")
count(gdpr_billion_idr_2019, "2019")
# RUKN data read ______________________________________________________________________________
# read master data
sheet           <- excel_sheets("data_demand_forecast/forecast/rukn_proyeksi_kebutuhan_listrik.xlsx" )
rukn_projection = lapply(setNames(sheet, sheet),
function(x) read_excel("data_demand_forecast/forecast/rukn_proyeksi_kebutuhan_listrik.xlsx", range = "A2:L15", col_names = TRUE, sheet = x))
rukn_projection = bind_rows(rukn_projection, .id="Code")
rukn_projection$Code      <- as.numeric(sub("page ","", rukn_projection$Code, fixed = TRUE))
names(rukn_projection)[names(rukn_projection) == "URAIAN"] <- "old_var"
rukn_projection           <- subset(rukn_projection, old_var!= "ASUMSI & TARGET" & old_var!= "HASIL PROYEKSI")
rukn_projection$SATUAN    <- NULL
View(rukn_projection)
# reshape the data
projection_data <- reshape2:: melt(rukn_projection, id.vars = c("Code","old_var"))
View(projection_data)
count(projection_data, "2019")
# assign name to each sheet
projection_data           <- merge(province_code, projection_data, by = 'Code')
projection_data$Code      <- NULL
province_code <- read_excel("data_demand_forecast/glossary.xlsx",
sheet = "code")
# assign name to each sheet
projection_data           <- merge(province_code, projection_data, by = 'Code')
View(projection_data)
library(readxl)
library(tidyverse)
library(reshape2)
library(data.table)
setwd("C:/Users/Brajamusthi/OneDrive/Master of Energy Research/Github/ArchEnSys")
province_code <- read_excel("data_demand_forecast/glossary.xlsx",
sheet = "code")
# this script prepares prediction datasets
# dist_gwh = year + gdpr_billion_idr + gdpr_growth + population + gwh_cons_percap + intensity_biased,
# RUKN data read ______________________________________________________________________________
# read master data
sheet           <- excel_sheets("data_demand_forecast/forecast/rukn_proyeksi_kebutuhan_listrik.xlsx" )
rukn_projection = lapply(setNames(sheet, sheet),
function(x) read_excel("data_demand_forecast/forecast/rukn_proyeksi_kebutuhan_listrik.xlsx", range = "A2:L15", col_names = TRUE, sheet = x))
rukn_projection = bind_rows(rukn_projection, .id="Code")
rukn_projection$Code      <- as.numeric(sub("page ","", rukn_projection$Code, fixed = TRUE))
names(rukn_projection)[names(rukn_projection) == "URAIAN"] <- "old_var"
rukn_projection           <- subset(rukn_projection, old_var!= "ASUMSI & TARGET" & old_var!= "HASIL PROYEKSI")
rukn_projection$SATUAN    <- NULL
#change variable names ***** does not work
# new_variables <- read_excel("data_demand_forecast/glossary.xlsx", sheet = "variables")
# projection_data <- merge(rukn_projection, unique(new_variables), all.x = TRUE, by = "old_var", sort = TRUE)
# projection_data$old_var <- NULL
# reshape the data
projection_data <- reshape2:: melt(rukn_projection, id.vars = c("Code","old_var"))
View(projection_data)
# assign name to each sheet
projection_data           <- merge(province_code, projection_data, by = "Code")
projection_data$Code      <- NULL
projection_data           <- na.omit(projection_data) #drop NA's
# reshape the data
projection_data <- reshape2:: melt(rukn_projection, id.vars = c("Code","old_var"))
# assign name to each sheet
projection_data           <- merge(province_code, projection_data, by = "Code")
projection_data$Code      <- NULL
View(rukn_projection)
# reshape the data
projection_data <- reshape2:: melt(rukn_projection, id.vars = c("Code","old_var"))
rukn_projection           <- rukn_projection %>%  mutate(old_var = str_remove_all(old_var, "\\s"))
projection_data <- reshape2:: melt(rukn_projection, id.vars = c("Code","old_var"))
# assign name to each sheet
projection_data           <- merge(province_code, projection_data, by = "Code")
projection_data <- reshape2:: melt(rukn_projection, id.vars = c("Code","old_var"))
projection_data           <- na.omit(projection_data) #drop NA's
# assign name to each sheet
projection_data           <- merge(province_code, projection_data, by = "Code")
projection_data <- reshape2:: melt(rukn_projection, id.vars = c("Code","old_var"))
projection_data           <- na.omit(projection_data) #drop NA's
View(province_code)
province_code <- read_excel("data_demand_forecast/glossary.xlsx",
sheet = "code")
projection_data <- reshape2:: melt(rukn_projection, id.vars = c("Code","old_var"))
projection_data <- reshape2:: melt(rukn_projection, id.vars = c("Code","old_var"))
# assign name to each sheet
projection_data           <- merge(province_code, projection_data, by = "Code")
projection_data$Code      <- NULL
projection_data           <- na.omit(projection_data) #drop NA's
names(projection_data)[names(projection_data) == "variable"] <- "year"
projection_data  <- projection_data %>%  mutate(old_var = str_remove_all(old_var, "\\s"))
new_variables    <- read_excel("data_demand_forecast/glossary.xlsx", sheet = "variables")
new_variables    <- new_variables %>% mutate(old_var = str_remove_all(old_var,"\\s"))
projection_data  <- merge(projection_data, new_variables, by = 'old_var')
projection_data$old_var <- NULL
new_variables    <- read_excel("data_demand_forecast/glossary.xlsx", range = "A1:B12", sheet = "variables")
new_variables    <- new_variables %>% mutate(old_var = str_remove_all(old_var,"\\s"))
View(new_variables)
projection_data  <- merge(projection_data, new_variables, by = 'old_var')
projection_data <- reshape2:: melt(rukn_projection, id.vars = c("Code","old_var"))
# assign name to each sheet
projection_data           <- merge(province_code, projection_data, by = "Code")
projection_data$Code      <- NULL
projection_data           <- na.omit(projection_data) #drop NA's
names(projection_data)[names(projection_data) == "variable"] <- "year"
#clean variable names
projection_data  <- projection_data %>%  mutate(old_var = str_remove_all(old_var, "\\s"))
new_variables    <- read_excel("data_demand_forecast/glossary.xlsx", range = "A1:B12", sheet = "variables")
new_variables    <- new_variables %>% mutate(old_var = str_remove_all(old_var,"\\s"))
projection_data  <- merge(projection_data, new_variables, by = 'old_var')
projection_data$old_var <- NULL
projection_data$value  <- sub(".","", projection_data$value, fixed = TRUE)
projection_data$value  <- sub(",",".", projection_data$value, fixed = TRUE)
projection_data$value  <- sub("(","-", projection_data$value, fixed = TRUE)
projection_data$value  <- sub(")","", projection_data$value, fixed = TRUE)
projection_data$value  <- as.numeric(projection_data$value)
# pivot to wider variable
# https://seananderson.ca/2013/10/19/reshape/
projection_data_source <- reshape2:: dcast(projection_data,
Province + year ~ new_var,
value.var = "value",
fun.aggregate =  mean,
na.rm = TRUE)
# remove unneeded data
projection_data_source[,c('inflation',
'add_capacity_cum',
'add_capacity',
'electrification_ratio',
'total_capacity')] <- NULL
# GDPR from 2019
# read data from historical_data_source
source("demand_forecast_historical_data_source.R")
#read 2019 GDPR data
gdpr_billion_idr_2019 <- historical_data_source[historical_data_source$year =="2019", c('Province',
'year',
'gdpr_billion_idr')]
aprojection_data_source <- merge(projection_data_source, gdpr_billion_idr_2019, by = c("Province", "year"), all.x = TRUE, sort = FALSE)
View(aprojection_data_source)
# calculate GDPR for following years
# gdpr(n) = gdpr (n-1) * (1+(gdpr_growth / 100))
first_year = 2019
library(tidyverse)
df <- tibble(
a = rnorm(10),
b = rnorm(10),
c = rnorm(10),
d = rnorm(10)
)
median(df$a)
#> [1] -0.2457625
median(df$b)
#> [1] -0.2873072
median(df$c)
#> [1] -0.05669771
median(df$d)
#> [1] 0.1442633
View(df)
output <- vector("double", ncol(df))  # 1. output
output <- vector("double", ncol(df))  # 1. output
for (i in seq_along(df)) {            # 2. sequence
output[[i]] <- median(df[[i]])      # 3. body
}
output
View(df)
View(df)
province <- c[a, a, a]
province <- c["a", "a", "a"]
province <- c("a", "a", "a")
year     <- c(2019, 2020, 2021)
gdpr <- (1,0,0)
gdpr_now <- c(1,0,0)
df <- data.frame(province, year, gdpr_growth, gdpr_now)
gdpr_growth <- c(1, 0.5, 0.5)
df <- data.frame(province, year, gdpr_growth, gdpr_now)
df
df$gdpr_now = 3
for (i in df$year[2020:2021]){
df$gdpr_now = 3
}
df
province <- c("a", "a", "a", "b", "b", "b")
year     <- c(2019, 2020, 2021, 2019, 2020, 2021)
gdpr_growth <- c(1, 0.5, 0.5, 2, 0.2, 0.2)
gdpr_now <- c(1,0,0,2,0,0)
df <- data.frame(province, year, gdpr_growth, gdpr_now)
df
for (i in df$year[2020:2021]){
df$gdpr_now = 3
}
df
df$gdpr_now = 3
df
df <- data.frame(province, year, gdpr_growth, gdpr_now)
df
if (df$year > 2019){
df$gdpr_now = 3
}
df
df$gdpr_now = 3
df
df <- data.frame(province, year, gdpr_growth, gdpr_now)
if (df$year > 2019){
df$gdpr_now = 3
}
if (df$year > 2019){
#df$gdpr_now = 3
print("ok")
}
for (i in df$year[2020:2021]){
df$gdpr_now = 3
}
df
for (i in 2020:2021){
df$gdpr_now = 3
}
df
df <- data.frame(province, year, gdpr_growth, gdpr_now)
df
for (i in 2020:2021){
df$gdpr_now = 3
}
df
for (i in df$year){
df$gdpr_now = year
}
df
for (i in df$year){
df$gdpr_now = year * gdpr_growth
}
df
df <- data.frame(province, year, gdpr_growth, gdpr_now)
df
for (i in df$year[df$year > 2019]){
df$gdpr_now = year * gdpr_growth
}
df
for (i in df$year){
df$gdpr_now = year * gdpr_growth
}
df
df <- data.frame(province, year, gdpr_growth, gdpr_now)
for (i in df$year){
df$gdpr_now = year * gdpr_growth
}
df
for (i in df$year){
df$gdpr_now = lag(year)
}
df
df <- data.frame(province, year, gdpr_growth, gdpr_now)
df
for (i in df$year[2020:2021]){
df$gdpr_now = lag(year)
}
df
df <- data.frame(province, year, gdpr_growth, gdpr_now)
df
for (i in df$year(2020:2021){
}
for (i in df$year(2020:2021)){
df$gdpr_now = lag(year)
}
for (i in df$year[[2020:2021]){
for (i in df$year[[2020:2021]]){
df$gdpr_now = lag(year)
}
#input 2019 gdpr data to projection data
projection_data_source$gdpr_billion_idr_2019 <-
aprojection_data_source <- merge(projection_data_source, gdpr_billion_idr_2019, by = c("Province"), all.x = TRUE, sort = FALSE)
aprojection_data_source$gdpr_billion_idr = gdpr_billion_idr * (1+((gdpr_growth)/100))
aprojection_data_source$gdpr_billion_idr = aprojection_data_source$gdpr_billion_idr * (1+((aprojection_data_source$gdpr_growth)/100))
province <- c("a","a","a","b","b","b")
year <- c(2019,2020,2021,2019,2020,2021)
gdpr_gr <- c(1,0.5,0.5,2,0.2,0.2)
gdpr_now <- c(1,0,0,2,0,0)
df <- data.frame(province, year, gdpr_gr, gdpr_now)
df
if (gdpr_gr > 2019){
gdpr_now = lag(gdpr_now)
}
if (year > 2019){
gdpr_now = lag(gdpr_now)
}
df <- data.frame(province, year, gdpr_gr, gdpr_now)
df
for (i in year){
gdpr_now = lag(gdpr_now)
}
df
for (i in year){
gdpr_now = lag(year)
}
df
for (i in df$year){
df$gdpr_now = lag(df$year)
}
df
for (i in df$year){
df$gdpr_now = lag(df$year[2019])
}
df
for (i in df$year){
df$gdpr_now = df$gdpr_now[df$year == 2019]
}
df
df <- data.frame(province, year, gdpr_gr, gdpr_now)
df
for (i in df$year){
df$gdpr_now = df$gdpr_now[df$year == 2019]
}
df
df <- data.frame(province, year, gdpr_gr, gdpr_now)
df
province <- c("a","a","a","b","b","b")
year <- c(2019,2020,2021,2019,2020,2021)
gdpr_gr <- c(1,0.5,0.5,2,0.2,0.2)
gdpr_now <- c(1,0,0,2,0,0)
df <- data.frame(province, year, gdpr_gr, gdpr_now)
df
for (i in df$year){
df$gdpr_now = df$gdpr_now[df$year == 2019]
}
df
df <- data.frame(province, year, gdpr_gr, gdpr_now)
df
df$gdpr_now[df$year == 2019]
df$gdpr_now = df$gdpr_now[df$province, df$year == 2019]
for (i in df$year){
df$gdpr_now = df$gdpr_now[df$province, df$year == 2019]
}
df <- data.frame(province, year, gdpr_gr, gdpr_now)
df
df$gdpr_now[df$year == 2019]
df$gdpr_now[df$year == 2019 & df$province]
df$gdpr_now[df_province[df$year == 2019]]
df$gdpr_now[df$province[df$year == 2019]]
df <- data.frame(province, year, gdpr_gr, gdpr_now)
df
df$gdpr_now[df$province[df$year == 2019]]
df$gdpr_now[df$year == 2019]
df$gdpr_now[df$year == 2019, "province"]
df[df$yerar == 2019, "province"]
df[df$year == 2019, "province"]
df <- data.frame(province, year, gdpr_gr, gdpr_now)
df
df$gdpr_now[df$year == 2019]
df[df$year == 2019, "province"]
for (i in df$year){
df$gdpr_now = df[df$year > 2019, "gdpr_now"]
}
df
for (i in df$year){
df$[df$year > 2019] = df[df$year > 2019, "gdpr_now"]
}
for (i in df$year){
df$gdpr_now = df[df$province == "a", "year"]
}
df
for (i in df$year){
df$gdpr_now = df[df$province == "a", "gdpr_gr"]
}
df
for (i in df$year){
df$gdpr_now = lag(gdpr_now)*(1+df[df$province == "a", "gdpr_gr"])
}
df
df <- data.frame(province, year, gdpr_gr, gdpr_now)
df
for (i in df$year){
df$gdpr_now = lag(gdpr_now)*(1+df[df$province == "a", "gdpr_gr"])
}
df
df$gdpr_now[df$year == 2019]
df[df$year == 2019, "province"]
df <- data.frame(province, year, gdpr_gr, gdpr_now)
df
for (i in df$year){
df$gdpr_now = lag(gdpr_now)*(1+df[df$year == 2019, "gdpr_gr"])
}
df
df[df$year == 2019, "province"]
df[df$year == 2019, "gdpr_now"]
df <- data.frame(province, year, gdpr_gr, gdpr_now)
df
df[df$year == 2019, "gdpr_now"]
df[df$year == 2019, df$province == "a","gdpr_now"]
df[df$year == 2019 & df$province == "a","gdpr_now"]
for (i in df$year[2020:2021]){
df$gdpr_now = 3
}
df
for (i in df[df$year > 2019]){
df$gdpr_now = 3
}
for (i in df[df$year > 2019,]){
df$gdpr_now = 3
}
df
df <- data.frame(province, year, gdpr_gr, gdpr_now)
df
for (i in df[df$year > 2019,]){
df$gdpr_now = 3
}
df
for (i in df[df$year == 2019,]){
df$gdpr_now = 3
}
df
for (i in df[df$year == 2019,]){
df$gdpr_now = 4
}
df
for (i in df$year[,c(2020,2021)]]){
df$gdpr_now = 3
}
for (i in df$year[,c(2020,2021)]){
df$gdpr_now = 3
}
for (i in df$year>2019){
df$gdpr_now = 3
}
df
for (i in df$year>2019){
df$gdpr_now = 4
}
df
df[df$year == 2019 & df$province == "b","gdpr_now"]
df <- data.frame(province, year, gdpr_gr, gdpr_now)
df
df$gdpr_now[df$year == 2019]
df[df$year == 2019 & df$province == "b","gdpr_now"]
for (i in df$year){
print(i)
}
df
df$gdpr_now <- df[df$year == 2019,"gdpr_now"]
df
df$gdpr_now <- df[df$year == 2019, df$province, "gdpr_now"]
for (i in df$year){
print(i)
}
df <- data.frame(province, year, gdpr_gr, gdpr_now)
df
df$gdpr_now <- df[df$year == 2019, df$province, "gdpr_now"]
df$gdpr_now <- df[df$year == 2019 & df$province, "gdpr_now"]
for (i in c(2020,2021)){
print(i)
}
for (i in c(2020,2021)){
df$gdpr_now = df$gdpr_now[df$year == 2019]
}
df
