library("tidyverse")
install.packages("tidyverse")
library("tidyverse")
library("tidyverse")
Sys.which("make")
writelines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
install.packages("d3Network")
install.packages("xlsx")
install.packages("networkD3")
library(xlsx)
library("networkD3")
library(networkD3)
library(readxl)
library(readxl)
library(readxl)
library(read)
nodes2 <- read_xlsx("https://d.docs.live.net/dd297915e9a08dcf/Master%20of%20Energy%20Research/sankey_coba.xlsx", sheetName = "nodes")
nodes2 <- read_xlsx("sankey_coba.xlsx", sheetName = "nodes")
nodes2 <- read_excel("sankey_coba.xlsx", sheetName = "nodes")
nodes2 <- read_excel("sankey_coba.xlsx", sheet = "nodes")
library(readxl)
sankey_coba <- read_excel("C:/Users/Brajamusthi/OneDrive/Master of Energy Research/sankey_coba.xlsx")
View(sankey_coba)
links2 <- read_excel("sankey_coba.xlsx", sheet = "links")
nodes2 <- read_excel("sankey_coba.xlsx", sheet = "nodes")
sankeyNtwork(Links = links2, Nodes = nodes2, Source = "source",
Target = "target", Value = "value", NodeID = "name",
fontFamily = "sans-serif", iterations = 0)
View(sankey_coba)
View(sankey_coba)
View(sankey_coba)
#install.packages("networkD3")
#install.packages("xlsx")
library(tidyverse)
library(xlsx)
sankeyNetwork(Links = links2, Nodes = nodes2, Source = "source",
Target = "target", Value = "value", NodeID = "name",
fontFamily = "sans-serif", iterations = 0)
sankeyNetwork(Links = links2, Nodes = nodes2, Source = "source",
Target = "target", Value = "value", NodeID = "name",
fontFamily = "sans-serif", iterations = 0)
library(tidyverse)
library(readxl)
library(xlsx)
library(networkD3)
library(readxl)
links2 <- read_excel("sankey_coba.xlsx", sheet = "links")
nodes2 <- read_excel("sankey_coba.xlsx", sheet = "nodes")
sankeyNetwork(Links = links2, Nodes = nodes2, Source = "source",
Target = "target", Value = "value", NodeID = "name",
fontFamily = "sans-serif", iterations = 0)
library(tidyverse)
library(readxl)
library(xlsx)
library(networkD3)
library(readxl)
links2 <- read_excel("sankey_coba.xlsx", sheet = "links")
nodes2 <- read_excel("sankey_coba.xlsx", sheet = "nodes")
sankeyNetwork(Links = links2, Nodes = nodes2, Source = "source",
Target = "target", Value = "value", NodeID = "name",
fontFamily = "sans-serif", iterations = 0)
library(lubridate)
#Student Name: Anggara Brajamusthi
#Student UPI : abr571
#Student ID  : 746970259
#load libraries
library(tidyverse)
library(lubridate)
#read the generation.csv data
generation_csv = read.csv("generation.csv")
#Question 3.a
#Student ID  : 746970259
#reshape the generation data into single generation output and attribute it as MWh
generation = gather(generation_csv, key=TP, value=MWh, starts_with("TP"))
#Note: the original data is in kWh so conversion is needed
generation$MWh <- generation$MWh/1000
generation
#Question 3.b
#Student ID  : 746970259
#Display total generation by Fuel type
#The data (generation) is already in MWh, therefore, no conversion will be made
#Also, the toal generation is as the unit of energy, therefore the data will be summarised as it is
gen_fuel=group_by(generation,Fuel) %>%
summarise(total=sum(MWh,na.rm=TRUE))
gen_fuel
#Question 3.c
#Student ID  : 746970259
#Display stacked bar chart comparing output for each Regions, which consist of stacked colored Fuel bars
gen_region=group_by(generation,Region, Fuel) %>%
summarise(total=sum(MWh,na.rm=TRUE))
gen_region
ggplot(gen_region,aes(x=Region, y=total, fill=Fuel))+
geom_bar(position="stack", stat="identity")+
ggtitle("Total Generation based on Fuel Type for Each Region in 2018","Student ID 746970259")+
ylab("Generation (MWh)")
#additional data to show total generation (MWh) in each region
gen_region_total=group_by(generation,Region) %>%
summarise(total=sum(MWh,na.rm=TRUE))
gen_region_total
#convert TP attribute to integers
generation$TP=as.integer(sub("TP","",generation$TP))
#parse Date attribute
generation$Date=parse_date_time(generation$Date,"dmy")
generation
#Question 3.d
#Student ID  : 746970259
#Display line graph
#showing: average half-hourly generation
#         in trading periods 1 - 48
#         use different colour in each month
# create new attribute for the month
generation$Month=as.factor(month(generation$Date, label = TRUE))
generation
#filter for trading period 1 - 48
generation=filter(generation,TP<=48)
#group data
gen_month=group_by(generation,TP,Month)%>%
summarise(average=mean(MWh,na.rm=TRUE))
gen_month
#ggplot line graph by period, month and half-hourly generation
ggplot(gen_month,aes(x=TP,y=average,group=Month,col=Month),alpha=0.5)+
geom_line()+
ggtitle("Average Half-hourly Generation for TP in Each Month","Student ID 746970259")+
ylab("Generation (MWh)")
#Question 3.e
#Student ID  : 746970259
#create collection of box plots
#   one for each fuel type
#   of total daily generation
#   in each month
# preparing the data
generation$Day=as.factor(mday(generation$Date))
gen_daily=group_by(generation,Month,Day, Fuel)%>%
summarise(total=sum(MWh,na.rm=TRUE))
gen_daily
ggplot(gen_daily,aes(x=Month,y=total,fill=Month))+
geom_boxplot()+
facet_wrap(~factor(Fuel))+
ggtitle("Daily Basis - Monthly Fuel Based Generation","Student ID 746970259")+
ylab("Generation (MWh)")
View(sankey_coba)
library(readxl)
sankey_coba <- read_excel("C:/Users/Brajamusthi/OneDrive/Master of Energy Research/sankey_coba.xlsx")
View(sankey_coba)
library(readxl)
library(networkD3)
library(readxl)
links2 <- read_excel("C:/Users/Brajamusthi/OneDrive/Master of Energy Research/sankey_coba.xlsx", sheet = "links")
nodes2 <- read_excel("C:/Users/Brajamusthi/OneDrive/Master of Energy Research/sankey_coba.xlsx", sheet = "nodes")
sankeyNetwork(Links = links2, Nodes = nodes2, Source = "source",
Target = "target", Value = "value", NodeID = "name",
fontFamily = "sans-serif", iterations = 0)
library(readxl)
library(networkD3)
library(readxl)
links2 <- read_excel("r/sankey_coba.xlsx", sheet = "links")
nodes2 <- read_excel("r/sankey_coba.xlsx", sheet = "nodes")
sankeyNetwork(Links = links2, Nodes = nodes2, Source = "source",
Target = "target", Value = "value", NodeID = "name",
fontFamily = "sans-serif", iterations = 0)
library(readxl)
library(networkD3)
#links2 <- read_excel("indonesia_energy_flow.xlsx", sheet = "links")
#nodes2 <- read_excel("indonesia_energy_flow.xlsx", sheet = "nodes")
links2 <- read_excel("indonesia_energy_flow.xlsx", sheet = "links", range = "A1:D38")
nodes2 <- read_excel("indonesia_energy_flow.xlsx", sheet = "nodes", range = "A1:B39")
sankeyNetwork(Links = links2, Nodes = nodes2, Source = "source",
Target = "target", Value = "value", NodeID = "Nodes",
fontFamily = "sans-serif", iterations = 100)
library(readxl)
library(networkD3)
#links2 <- read_excel("indonesia_energy_flow.xlsx", sheet = "links")
#nodes2 <- read_excel("indonesia_energy_flow.xlsx", sheet = "nodes")
links2 <- read_excel("indonesia_energy_flow.xlsx", sheet = "links", range = "A1:D38")
nodes2 <- read_excel("indonesia_energy_flow.xlsx", sheet = "nodes", range = "A1:B39")
sankeyNetwork(Links = links2, Nodes = nodes2, Source = "source",
Target = "target", Value = "value", NodeID = "Nodes",
fontFamily = "sans-serif", iterations = 100)
library(readxl)
library(networkD3)
#links2 <- read_excel("indonesia_energy_flow.xlsx", sheet = "links")
#nodes2 <- read_excel("indonesia_energy_flow.xlsx", sheet = "nodes")
links2 <- read_excel("Data Processing/indonesia_energy_flow.xlsx", sheet = "links", range = "A1:D38")
nodes2 <- read_excel("Data Processing/indonesia_energy_flow.xlsx", sheet = "nodes", range = "A1:B39")
sankeyNetwork(Links = links2, Nodes = nodes2, Source = "source",
Target = "target", Value = "value", NodeID = "Nodes",
fontFamily = "sans-serif", iterations = 100)
library(readxl)
indonesia_energy_flow <- read_excel("C:/Users/Brajamusthi/OneDrive/Master of Energy Research/Data Processing/indonesia_energy_flow.xlsx")
View(indonesia_energy_flow)
library(readxl)
library(networkD3)
#links2 <- read_excel("indonesia_energy_flow.xlsx", sheet = "links")
#nodes2 <- read_excel("indonesia_energy_flow.xlsx", sheet = "nodes")
links2 <- read_excel("indonesia_energy_flow.xlsx", sheet = "links", range = "A1:D38")
nodes2 <- read_excel("indonesia_energy_flow.xlsx", sheet = "nodes", range = "A1:B39")
sankeyNetwork(Links = links2, Nodes = nodes2, Source = "source",
Target = "target", Value = "value", NodeID = "Nodes",
fontFamily = "sans-serif", iterations = 100)
library(readxl)
library(networkD3)
#links2 <- read_excel("indonesia_energy_flow.xlsx", sheet = "links")
#nodes2 <- read_excel("indonesia_energy_flow.xlsx", sheet = "nodes")
links2 <- read_excel("C:/Users/Brajamusthi/OneDrive/Master of Energy Research/Data Processing/indonesia_energy_flow.xlsx" sheet = "links", range = "A1:D38")
nodes2 <- read_excel("C:/Users/Brajamusthi/OneDrive/Master of Energy Research/Data Processing/indonesia_energy_flow.xlsx", sheet = "nodes", range = "A1:B39")
sankeyNetwork(Links = links2, Nodes = nodes2, Source = "source",
Target = "target", Value = "value", NodeID = "Nodes",
fontFamily = "sans-serif", iterations = 100)
library(readxl)
library(networkD3)
#links2 <- read_excel("indonesia_energy_flow.xlsx", sheet = "links")
#nodes2 <- read_excel("indonesia_energy_flow.xlsx", sheet = "nodes")
links2 <- read_excel("C:/Users/Brajamusthi/OneDrive/Master of Energy Research/Data Processing/indonesia_energy_flow.xlsx", sheet = "links", range = "A1:D38")
nodes2 <- read_excel("C:/Users/Brajamusthi/OneDrive/Master of Energy Research/Data Processing/indonesia_energy_flow.xlsx", sheet = "nodes", range = "A1:B39")
sankeyNetwork(Links = links2, Nodes = nodes2, Source = "source",
Target = "target", Value = "value", NodeID = "Nodes",
fontFamily = "sans-serif", iterations = 100)
library(readxl)
library(networkD3)
#links2 <- read_excel("indonesia_energy_flow.xlsx", sheet = "links")
#nodes2 <- read_excel("indonesia_energy_flow.xlsx", sheet = "nodes")
links2 <- read_excel("C:/Users/Brajamusthi/OneDrive/Master of Energy Research/Data Processing/indonesia_energy_flow.xlsx", sheet = "links", range = "A1:D38")
nodes2 <- read_excel("C:/Users/Brajamusthi/OneDrive/Master of Energy Research/Data Processing/indonesia_energy_flow.xlsx", sheet = "nodes", range = "A1:B39")
sankeyNetwork(Links = links2, Nodes = nodes2, Source = "source",
Target = "target", Value = "value", NodeID = "Nodes",
fontFamily = "sans-serif", iterations = 100)
library(readxl)
library(networkD3)
#links2 <- read_excel("indonesia_energy_flow.xlsx", sheet = "links")
#nodes2 <- read_excel("indonesia_energy_flow.xlsx", sheet = "nodes")
links2 <- read_excel("C:/Users/Brajamusthi/OneDrive/Master of Energy Research/Data Processing/indonesia_energy_flow.xlsx", sheet = "links", range = "A1:D38")
nodes2 <- read_excel("C:/Users/Brajamusthi/OneDrive/Master of Energy Research/Data Processing/indonesia_energy_flow.xlsx", sheet = "nodes", range = "A1:B39")
sankeyNetwork(Links = links2, Nodes = nodes2, Source = "source",
Target = "target", Value = "value", NodeID = "Nodes",
fontFamily = "sans-serif", iterations = 100)
library(readxl)
library(networkD3)
#links2 <- read_excel("indonesia_energy_flow.xlsx", sheet = "links")
#nodes2 <- read_excel("indonesia_energy_flow.xlsx", sheet = "nodes")
links2 <- read_excel("C:/Users/Brajamusthi/OneDrive/Master of Energy Research/Data Processing/indonesia_energy_flow.xlsx", sheet = "links", range = "A1:D38")
nodes2 <- read_excel("C:/Users/Brajamusthi/OneDrive/Master of Energy Research/Data Processing/indonesia_energy_flow.xlsx", sheet = "nodes", range = "A1:B39")
sankeyNetwork(Links = links2, Nodes = nodes2, Source = "source",
Target = "target", Value = "value", NodeID = "Nodes",
fontFamily = "sans-serif", iterations = 100)
View(indonesia_energy_flow)
library(readxl)
library(networkD3)
#links2 <- read_excel("indonesia_energy_flow.xlsx", sheet = "links")
#nodes2 <- read_excel("indonesia_energy_flow.xlsx", sheet = "nodes")
links2 <- read_excel("C:/Users/Brajamusthi/OneDrive/Master of Energy Research/Data Processing/indonesia_energy_flow.xlsx", sheet = "links", range = "A1:D38")
nodes2 <- read_excel("C:/Users/Brajamusthi/OneDrive/Master of Energy Research/Data Processing/indonesia_energy_flow.xlsx", sheet = "nodes", range = "A1:B39")
sankeyNetwork(Links = links2, Nodes = nodes2, Source = "source",
Target = "target", Value = "value", NodeID = "Nodes",
fontFamily = "sans-serif", iterations = 100)
library(readxl)
library(networkD3)
#links2 <- read_excel("indonesia_energy_flow.xlsx", sheet = "links")
#nodes2 <- read_excel("indonesia_energy_flow.xlsx", sheet = "nodes")
links2 <- read_excel("C:/Users/Brajamusthi/OneDrive/Master of Energy Research/Data Processing/indonesia_energy_flow.xlsx", sheet = "links", range = "A1:D43")
nodes2 <- read_excel("C:/Users/Brajamusthi/OneDrive/Master of Energy Research/Data Processing/indonesia_energy_flow.xlsx", sheet = "nodes", range = "A1:B44")
sankeyNetwork(Links = links2, Nodes = nodes2, Source = "source",
Target = "target", Value = "value", NodeID = "Nodes",
fontFamily = "sans-serif", iterations = 100)
library(readxl)
library(networkD3)
#links2 <- read_excel("indonesia_energy_flow.xlsx", sheet = "links")
#nodes2 <- read_excel("indonesia_energy_flow.xlsx", sheet = "nodes")
links2 <- read_excel("C:/Users/Brajamusthi/OneDrive/Master of Energy Research/Data Processing/indonesia_energy_flow.xlsx", sheet = "links", range = "A1:D43")
nodes2 <- read_excel("C:/Users/Brajamusthi/OneDrive/Master of Energy Research/Data Processing/indonesia_energy_flow.xlsx", sheet = "nodes", range = "A1:B44")
sankeyNetwork(Links = links2, Nodes = nodes2, Source = "source",
Target = "target", Value = "value", NodeID = "Nodes",
fontFamily = "sans-serif", iterations = 1)
library(readxl)
library(networkD3)
#links2 <- read_excel("indonesia_energy_flow.xlsx", sheet = "links")
#nodes2 <- read_excel("indonesia_energy_flow.xlsx", sheet = "nodes")
links2 <- read_excel("C:/Users/Brajamusthi/OneDrive/Master of Energy Research/Data Processing/indonesia_energy_flow.xlsx", sheet = "links", range = "A1:D43")
nodes2 <- read_excel("C:/Users/Brajamusthi/OneDrive/Master of Energy Research/Data Processing/indonesia_energy_flow.xlsx", sheet = "nodes", range = "A1:B44")
sankeyNetwork(Links = links2, Nodes = nodes2, Source = "source",
Target = "target", Value = "value", NodeID = "Nodes",
fontFamily = "sans-serif", iterations = 1000)
library(readxl)
library(networkD3)
#links2 <- read_excel("indonesia_energy_flow.xlsx", sheet = "links")
#nodes2 <- read_excel("indonesia_energy_flow.xlsx", sheet = "nodes")
links2 <- read_excel("C:/Users/Brajamusthi/OneDrive/Master of Energy Research/Data Processing/indonesia_energy_flow.xlsx", sheet = "links", range = "A1:D43")
nodes2 <- read_excel("C:/Users/Brajamusthi/OneDrive/Master of Energy Research/Data Processing/indonesia_energy_flow.xlsx", sheet = "nodes", range = "A1:B44")
sankeyNetwork(Links = links2, Nodes = nodes2, Source = "source",
Target = "target", Value = "value", NodeID = "Nodes",
fontFamily = "sans-serif", iterations = 1000)
library(readxl)
library(networkD3)
#links2 <- read_excel("indonesia_energy_flow.xlsx", sheet = "links")
#nodes2 <- read_excel("indonesia_energy_flow.xlsx", sheet = "nodes")
links2 <- read_excel("C:/Users/Brajamusthi/OneDrive/Master of Energy Research/Data Processing/indonesia_energy_flow.xlsx", sheet = "links", range = "A1:D43")
nodes2 <- read_excel("C:/Users/Brajamusthi/OneDrive/Master of Energy Research/Data Processing/indonesia_energy_flow.xlsx", sheet = "nodes", range = "A1:B44")
sankeyNetwork(Links = links2, Nodes = nodes2, Source = "source",
Target = "target", Value = "value", NodeID = "Nodes",
fontFamily = "sans-serif", iterations = 100)
library(readxl)
library(networkD3)
links2 <- read_excel("indonesia_energy_flow_2.xlsx", sheet = "links", range = "A1:D110")
nodes2 <- read_excel("indonesia_energy_flow_2.xlsx", sheet = "nodes", range = "A1:B63")
sankeyNetwork(Links = links2, Nodes = nodes2, Source = "source",
Target = "target", Value = "value", NodeID = "Nodes",
fontFamily = "sans-serif", iterations = 10000, units = "Thousand BOE",
fontSize = 10, nodeWidth = 10)
library(readxl)
indonesia_energy_flow_2 <- read_excel("C:/Users/Brajamusthi/OneDrive/Master of Energy Research/Data Processing/indonesia_energy_flow_2.xlsx")
View(indonesia_energy_flow_2)
library(readxl)
library(networkD3)
links2 <- read_excel("indonesia_energy_flow_2.xlsx", sheet = "links", range = "A1:D110")
nodes2 <- read_excel("indonesia_energy_flow_2.xlsx", sheet = "nodes", range = "A1:B63")
sankeyNetwork(Links = links2, Nodes = nodes2, Source = "source",
Target = "target", Value = "value", NodeID = "Nodes",
fontFamily = "sans-serif", iterations = 10000, units = "Thousand BOE",
fontSize = 10, nodeWidth = 10)
View(indonesia_energy_flow_2)
library(readxl)
library(networkD3)
links2 <- read_excel("indonesia_energy_flow_2.xlsx", sheet = "links", range = "A1:D110")
nodes2 <- read_excel("indonesia_energy_flow_2.xlsx", sheet = "nodes", range = "A1:B63")
sankeyNetwork(Links = links2, Nodes = nodes2, Source = "source",
Target = "target", Value = "value", NodeID = "Nodes",
fontFamily = "sans-serif", iterations = 10000, units = "Thousand BOE",
fontSize = 10, nodeWidth = 10)
library(shiny); runApp('C:/Users/Brajamusthi/OneDrive/Master of Energy Research/Github/EnArch/app_try.R')
runApp('C:/Users/Brajamusthi/OneDrive/Master of Energy Research/Github/EnArch/app_try.R')
runApp('C:/Users/Brajamusthi/OneDrive/Master of Energy Research/Github/EnArch/app_try.R')
runApp('C:/Users/Brajamusthi/OneDrive/Master of Energy Research/Github/EnArch/app_try.R')
runApp('C:/Users/Brajamusthi/OneDrive/Master of Energy Research/Github/EnArch')
runApp('C:/Users/Brajamusthi/OneDrive/Master of Energy Research/Github/EnArch')
runApp('C:/Users/Brajamusthi/OneDrive/Master of Energy Research/Github/EnArch')
runApp('C:/Users/Brajamusthi/OneDrive/Master of Energy Research/Github/EnArch')
runApp('C:/Users/Brajamusthi/OneDrive/Master of Energy Research/Github/EnArch')
runApp('C:/Users/Brajamusthi/OneDrive/Master of Energy Research/Github/EnArch')
runApp('C:/Users/Brajamusthi/OneDrive/Master of Energy Research/Github/EnArch')
runApp('C:/Users/Brajamusthi/OneDrive/Master of Energy Research/Github/EnArch')
runApp('C:/Users/Brajamusthi/OneDrive/Master of Energy Research/Github/EnArch')
runApp('C:/Users/Brajamusthi/OneDrive/Master of Energy Research/Github/EnArch')
runApp('C:/Users/Brajamusthi/OneDrive/Master of Energy Research/Github/EnArch')
shiny::runApp('C:/Users/Brajamusthi/OneDrive/Master of Energy Research/Github/ArchEnSys')
library(shiny)
ui <- fluidPage(
titlePanel("Hello Shiny!"),
sidebarLayout(
sidebarPanel(
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
mainPanel(
plotOutput(outputId = "distPlot")
)
)
)
server <- function(input, output) {
output$distPlot <- renderPlot({
x  <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins +1)
hist(x, breaks = bins, col "#75AADB", border = "white",
xlab = "Waiting time to next eruption (in mins",
main = "Histogram of waiting times")
})
}
shinyApp(ui = ui, server = server)
View(ui)
library(shiny)
ui <- fluidPage(
titlePanel("Hello Shiny!"),
sidebarLayout(
sidebarPanel(
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
mainPanel(
plotOutput(outputId = "distPlot")
)
)
)
server <- function(input, output) {
output$distPlot <- renderPlot({
x  <- faithful$waiting,
bins <- seq(min(x), max(x), length.out = input$bins +1),
hist(x, breaks = bins, col "#75AADB", border = "white",
xlab = "Waiting time to next eruption (in mins",
main = "Histogram of waiting times")
})
}
shinyApp(ui = ui, server = server)
library(shiny)
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Hello Shiny!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
# Histogram of the Old Faithful Geyser Data ----
# with requested number of bins
# This expression that generates a histogram is wrapped in a call
# to renderPlot to indicate that:
#
# 1. It is "reactive" and therefore should be automatically
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$distPlot <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#75AADB", border = "white",
xlab = "Waiting time to next eruption (in mins)",
main = "Histogram of waiting times")
})
}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
library(tidyverse)
library(ggplot2)
library(dplyr)
library(tidyverse)
library(neuralnet)
library(tidyverse)
library(ggplot2)
library(dplyr)
setwd("C:/Users/Brajamusthi/OneDrive/Master of Energy Research/Github/ArchEnSys")
training_source   <- source("demand_forecast_historical_data_source.R")
projection_source <- source("demand_forecast_prediction_data_source.R")
# select which province / area to predict
province_to_predict = "INDONESIA"
# Prepare training dataset ------------------------------------------------
# open historical data
# use everything for training
nn_train_dataset <- historical_data_source[historical_data_source$Province == province_to_predict,]
# create Max-min scaling
max_dist_gwh   <- max(nn_train_dataset$dist_gwh)
min_dist_gwh   <- min(nn_train_dataset$dist_gwh)
scale_dist_gwh <- max_dist_gwh - min_dist_gwh
# max-min normalization
normalize <- function(x) {
return((x - min(x)) / (max(x) - min(x)))
}
maxmindf_train  <- as.data.frame(sapply(nn_train_dataset[,c(3:12),], normalize))
#    ori_value <- as.data.frame(t((t(maxmindf_train)*scale_val) + min_val))
# Create training & testing data set
# 100% of the data will be used
train_obs_size = ceiling(nrow(maxmindf_train) * 1)
test_obs_size  = nrow(maxmindf_train) - train_obs_size
train_dataset   <- maxmindf_train[1:train_obs_size, ]
test_dataset    <- maxmindf_train[(train_obs_size+1):nrow(maxmindf_train),]
# Neural Network Training -------------------------------------------------
#fit neural network
nn <- neuralnet(dist_gwh ~ year + gdpr_billion_idr + gdpr_growth + population + kwh_dem_percap + intensity_biased,
data     = train_dataset,
hidden   = c(ncol(train_dataset), ncol(train_dataset), ncol(train_dataset)),
stepmax  = 1e+5,
act.fct  = "logistic",
linear.output = TRUE)
plot(nn, rep      = "best",
arrow.length = 0.15,
col.entry    ="blue",
col.hidden   ="red",
col.out      ="blue",
show.weights = TRUE,
information  = TRUE,
fontsize     = 10)
#try to create prediction by fitting trainned neural network to training data
Predict_2 = neuralnet::compute(nn, train_dataset)
predict_value_2  <- (Predict_2$net.result * scale_dist_gwh) + min_dist_gwh
actual_value_2   <- (train_dataset$dist_gwh * scale_dist_gwh) + min_dist_gwh
error_percent_2  <- ((predict_value_2 - actual_value_2)/actual_value_2)*100
results_denorm_2 <- data.frame(actual_value_2, predict_value_2, error_percent_2)
average_error_2  = mean(error_percent_2)
average_error_2
View(results_denorm_2)
Predict_1        = neuralnet::compute(nn, proj_dataset)
predict_value_1  <- (Predict_1$net.result  * scale_dist_gwh) + min_dist_gwh
actual_value_1   <- nn_proj_dataset$electricity_demand_twh * 1000
error_percent_1  <- ((predict_value_1 - actual_value_1)/actual_value_1)*100
results_denorm_1 <- data.frame(nn_proj_dataset$year, actual_value_1, predict_value_1, error_percent_1)
average_error_1  = mean(error_percent_1)
average_error_1
shiny::runApp('C:/Users/Brajamusthi/OneDrive/Master of Energy Research/Github/ArchEnSys - backup')
